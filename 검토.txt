문자열 함수
마지막에 NULL(0) 들어감 주의..최대길이가 20이면 사이즈는 21!!
strstr(대상문자열,찾을문자열), strchr
strlen은 연산에 시간이 걸릴 수 있음 O(N). 반복문안에 사용 자제..!

아스키코드는 문자를 %d로 출력.
int num = 문자로된숫자 - '0'; (숫자 0은 아스키로 0, 문자 '0'은 49,,-> 49만큼 빼면 숫자 0으로 가기때문)

소수
1은 소수가 아니다.
에라토스테네스의 체 
주어진 자연수 N이 소수이기 위한 필요충분 조건은 N이 N의 제곱근(sqrt)보다 크지 않은 어떤 소수로도 나눠지지 않는다
인수(약수) 중에서 소수인 것들을 소인수라고 한다.

long long (8byte, %lld, %llu)
크기가 너무 크면 값을 쪼개서 계산 필요 100000000000000000

절대값 fabs(), abs()
형변환 (float)(M/n), (float)M/(float)n 차이
memset은 0 or -1로만 쓰자..
비교 등의 경우 마이너스(-) 값 신경쓰자..

팩토리얼 0! =  1 이다..!!

어떤 수의 0의 개수를 알려고한다? -> 2*5가 몇 개인지..2와 5의 제곱수중 작은 값이 정답.
(팩토리얼에서 구하려면 모든 수의 2/5 제곱근 더해야함)

이진수변환

#define MIN(a,b) ((a)<(b)?(a):(b)) : 앞 뒤로 괄호를 꼭 해줘라,,(우선순위 문제발생)

동적계획법(Dynamic programming) memoization 최적해 찾기
-> 점화식이 실행되는 위치 중요
LCS 계산시 문자 비교할 때 주의..문자열 갯수가 넘어갈 때 A[i-1] == B[j-1]

scanf 여러 개 입력 받기 do{scanf("%d",&(samgak[i][j++]));} while (getc(stdin) == ' ');

타일채우기..모두 채우는 것(빈 곳x) 시간초과시 2차원 다이나믹..(백준 14852)

math.h pow,sqrt

C++ 2차원 배열 복사. copy(&src[0][0],&src[0][0]+(행/열곱), &dst[0][0]);

test case.
기 구현된 함수를 보고, 원하는 시나리오대로 실행시켜줘야 함.(실행함수 원하는 횟수(input 갯 수) 여러 번 호출,,

dp는 n의 경우 먼저 생각...n-1,,n-2 n을 포함하는지 마는지..등

vector pair 선언법..비교함수.(통신버퍼설계 문제 다시 풀어보기)

기본 math 함수
<cmath> / 올림 ceil(n), 내림 floor(n), 반올림 floor(n+0.5), 절대값 abs(n)


다익스트라 다시 풀어보기

overflow 조심,,문제 좀 잘 읽어라.
정답관련 처리할 때 변수/배열 크기 잘 생각해야함

https://github.com/cpuu/LGSWPCT

계단오르기
n번 째 계단은 무조건 밟아야 하므로 n-1을 밟고오는 경우와 n-1를 밟지 않고 오는 경우가 있다.
n-1를 밟을 경우 n-2는 못 밟기 때문에 n-3까지의 최대 점수와
n-1를 밟지 않을 경우 n-2까지의 최대 점수중 큰 것을 선택하는 점화식.
MAX((Solve(n-3) + P[n-1] + P[n]), (Solve(n-2) + P[n]));

보류 : 건물옥상정원(시간초과)

두 정수 곱셈 후 overflow 확인 a*b=c if(c/b != a) overflow!!

string find
String::size_type n;
str.find("haha",n); //str의 n 부터 "haha" 찾기. 찾으면 위치, 못 찾으면 string::npos return 됨.

bfs는 최단 경로 탐색시 사용..(큐가 빌때까지 노드 큐에 넣고 다시 빼서 연결된 간선 정보 큐에 넣고 반복)
 -> 미로 최단경로의 경우 pair(i,j,lvl)로 구현 필요..
dfs는 스택활용..미로찾기 등
플로이드 알고리즘 : 모든 쌍에 대해서 최소 비용구하기,,3중 for문 (V^3) 시간 복잡도.

ccw 반시계방향 양수 / 시계방향 음수
x1 x2 x3 x1
y1 y2 y3 y1
int a = x1 * y2 + x2 * y3 + x3 * y1;
int b = y1 * x2 + y2 * x3 + y3 * x1;
return a - b;

typedef struct node *pnode;
typedef struct node
{
	int data;
	pnode leftnode;
	pnode rightnode;	
}node;
vector<node> nv;

test case 갯수가 있는 경우,,,tc 안에 풀이시 return 하지마라..;;

LIS(Longest Increasing Subsequence)..dp 대표적인 문제..
dp는 값을 처음부터 하나씩 쌓아가는 방향으로 식을 세워야 함.
n-1의 해가 n의 해를 포함할 수 있도록...

LCS(Longest Common Substring)
1. String1[n], String2[k]가 같다면 : [n, k] == [n-1, k-1] + 1
2. String1[n], String2[k]가 다르면 : [n, k] == [n-1, k]와 [n, k-1] 중 큰 값

